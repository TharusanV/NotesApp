{"ast":null,"code":"var _jsxFileName = \"E:\\\\0TUser18\\\\Downloads\\\\Projects\\\\Notes App\\\\client\\\\src\\\\components\\\\NoteCreator\\\\NoteCreatorHub.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport \"../../css/Note Creator/noteCreator.css\";\nimport { useState } from \"react\";\nimport uuid from \"react-uuid\";\nimport NoteCreatorEditor from \"./NoteCreatorEditor\";\nimport NoteCreatorSidebar from \"./NoteCreatorSidebar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteCreatorHub = () => {\n  _s();\n  const [notes, setNotes] = useState([]); //Array of note objects (Getter = notes, Setter = setNotes())\n  const [activeNote, setActiveNote] = useState(false); //Stores the current active note - false meaning no active note (Getter = activeNote, Setter = setActiveNotes())\n\n  //Arrow function to add notes: uuid is an external library that will be used to generate a random id\n  const onAddNote = () => {\n    const newNote = {\n      noteID: uuid(),\n      userID: 1,\n      title: \"Untitled Note\",\n      body: \"\",\n      topic: \"General\",\n      lastModified: Date.now(),\n      likes: 0,\n      dislikes: 0\n    };\n    setNotes([newNote, ...notes]); //Adding the new note alongside the existing notes. The ... means that we will take everything in the existing notes array and put it into this new array\n  };\n\n  //Arrow function to delete notes\n  const onDeleteNote = deletedNoteID => {\n    setNotes(notes.filter(note => note.id !== deletedNoteID)); //Will print false if the current iteration's ID matches with the deleted note id and then remove it from the note array\n  };\n\n  //Arrow function to find the active note\n  const getActiveNote = () => {\n    return notes.find(note => note.id === activeNote);\n  };\n  const onUpdateNote = updateNote => {\n    const updateNotesArray = notes.map(note => {\n      if (note.id === activeNote) {\n        return updateNote;\n      }\n      return note;\n    });\n    setNotes(updateNotesArray);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"NoteCreatorHub\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(NoteCreatorSidebar, {\n        prop_Notes: notes,\n        prop_OnAddNote: onAddNote,\n        prop_OnDeleteNote: onDeleteNote,\n        prop_ActiveNote: activeNote,\n        prop_SetActiveNote: setActiveNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NoteCreatorEditor, {\n        prop_GetActiveNote: getActiveNote(),\n        prop_OnUpdateNote: onUpdateNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteCreatorHub, \"gB5omx9RPH1kLpQQ78qO3OWf5pg=\");\n_c = NoteCreatorHub;\nexport default NoteCreatorHub;\nvar _c;\n$RefreshReg$(_c, \"NoteCreatorHub\");","map":{"version":3,"names":["React","useState","uuid","NoteCreatorEditor","NoteCreatorSidebar","NoteCreatorHub","notes","setNotes","activeNote","setActiveNote","onAddNote","newNote","noteID","userID","title","body","topic","lastModified","Date","now","likes","dislikes","onDeleteNote","deletedNoteID","filter","note","id","getActiveNote","find","onUpdateNote","updateNote","updateNotesArray","map","display"],"sources":["E:/0TUser18/Downloads/Projects/Notes App/client/src/components/NoteCreator/NoteCreatorHub.jsx"],"sourcesContent":["import React from \"react\";\r\nimport \"../../css/Note Creator/noteCreator.css\";\r\nimport { useState } from \"react\";\r\nimport uuid from \"react-uuid\";\r\nimport NoteCreatorEditor from \"./NoteCreatorEditor\";\r\nimport NoteCreatorSidebar from \"./NoteCreatorSidebar\";\r\n\r\nconst NoteCreatorHub = () => {\r\n  const [notes, setNotes] = useState([]); //Array of note objects (Getter = notes, Setter = setNotes())\r\n  const [activeNote, setActiveNote] = useState(false); //Stores the current active note - false meaning no active note (Getter = activeNote, Setter = setActiveNotes())\r\n\r\n  //Arrow function to add notes: uuid is an external library that will be used to generate a random id\r\n  const onAddNote = () => {\r\n    const newNote = {\r\n      noteID: uuid(),\r\n      userID: 1,\r\n      title: \"Untitled Note\",\r\n      body: \"\",\r\n      topic: \"General\",\r\n      lastModified: Date.now(),\r\n      likes: 0,\r\n      dislikes: 0,\r\n    };\r\n\r\n    setNotes([newNote, ...notes]); //Adding the new note alongside the existing notes. The ... means that we will take everything in the existing notes array and put it into this new array\r\n  };\r\n\r\n  //Arrow function to delete notes\r\n  const onDeleteNote = (deletedNoteID) => {\r\n    setNotes(notes.filter((note) => note.id !== deletedNoteID)); //Will print false if the current iteration's ID matches with the deleted note id and then remove it from the note array\r\n  };\r\n\r\n  //Arrow function to find the active note\r\n  const getActiveNote = () => {\r\n    return notes.find((note) => note.id === activeNote);\r\n  };\r\n\r\n  const onUpdateNote = (updateNote) => {\r\n    const updateNotesArray = notes.map((note) => {\r\n      if (note.id === activeNote) {\r\n        return updateNote;\r\n      }\r\n\r\n      return note;\r\n    });\r\n\r\n    setNotes(updateNotesArray);\r\n  };\r\n\r\n  return (\r\n    <div className=\"NoteCreatorHub\">\r\n      {/*Passing in props from this component to the others that require certain states or functions - May use a state manager*/}\r\n      <div style={{ display: \"flex\" }}>\r\n        <NoteCreatorSidebar\r\n          prop_Notes={notes}\r\n          prop_OnAddNote={onAddNote}\r\n          prop_OnDeleteNote={onDeleteNote}\r\n          prop_ActiveNote={activeNote}\r\n          prop_SetActiveNote={setActiveNote}\r\n        />\r\n        <NoteCreatorEditor\r\n          prop_GetActiveNote={getActiveNote()}\r\n          prop_OnUpdateNote={onUpdateNote}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteCreatorHub;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,wCAAwC;AAC/C,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,YAAY;AAC7B,OAAOC,iBAAiB,MAAM,qBAAqB;AACnD,OAAOC,kBAAkB,MAAM,sBAAsB;AAAC;AAEtD,MAAMC,cAAc,GAAG,MAAM;EAAA;EAC3B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAErD;EACA,MAAMS,SAAS,GAAG,MAAM;IACtB,MAAMC,OAAO,GAAG;MACdC,MAAM,EAAEV,IAAI,EAAE;MACdW,MAAM,EAAE,CAAC;MACTC,KAAK,EAAE,eAAe;MACtBC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,SAAS;MAChBC,YAAY,EAAEC,IAAI,CAACC,GAAG,EAAE;MACxBC,KAAK,EAAE,CAAC;MACRC,QAAQ,EAAE;IACZ,CAAC;IAEDd,QAAQ,CAAC,CAACI,OAAO,EAAE,GAAGL,KAAK,CAAC,CAAC,CAAC,CAAC;EACjC,CAAC;;EAED;EACA,MAAMgB,YAAY,GAAIC,aAAa,IAAK;IACtChB,QAAQ,CAACD,KAAK,CAACkB,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKH,aAAa,CAAC,CAAC,CAAC,CAAC;EAC/D,CAAC;;EAED;EACA,MAAMI,aAAa,GAAG,MAAM;IAC1B,OAAOrB,KAAK,CAACsB,IAAI,CAAEH,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKlB,UAAU,CAAC;EACrD,CAAC;EAED,MAAMqB,YAAY,GAAIC,UAAU,IAAK;IACnC,MAAMC,gBAAgB,GAAGzB,KAAK,CAAC0B,GAAG,CAAEP,IAAI,IAAK;MAC3C,IAAIA,IAAI,CAACC,EAAE,KAAKlB,UAAU,EAAE;QAC1B,OAAOsB,UAAU;MACnB;MAEA,OAAOL,IAAI;IACb,CAAC,CAAC;IAEFlB,QAAQ,CAACwB,gBAAgB,CAAC;EAC5B,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,gBAAgB;IAAA,uBAE7B;MAAK,KAAK,EAAE;QAAEE,OAAO,EAAE;MAAO,CAAE;MAAA,wBAC9B,QAAC,kBAAkB;QACjB,UAAU,EAAE3B,KAAM;QAClB,cAAc,EAAEI,SAAU;QAC1B,iBAAiB,EAAEY,YAAa;QAChC,eAAe,EAAEd,UAAW;QAC5B,kBAAkB,EAAEC;MAAc;QAAA;QAAA;QAAA;MAAA,QAClC,eACF,QAAC,iBAAiB;QAChB,kBAAkB,EAAEkB,aAAa,EAAG;QACpC,iBAAiB,EAAEE;MAAa;QAAA;QAAA;QAAA;MAAA,QAChC;IAAA;MAAA;MAAA;MAAA;IAAA;EACE;IAAA;IAAA;IAAA;EAAA,QACF;AAEV,CAAC;AAAC,GA5DIxB,cAAc;AAAA,KAAdA,cAAc;AA8DpB,eAAeA,cAAc;AAAC;AAAA"},"metadata":{},"sourceType":"module"}