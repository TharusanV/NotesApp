[{"E:\\0TUser18\\Downloads\\Projects\\NotesApp\\client\\src\\index.js":"1","E:\\0TUser18\\Downloads\\Projects\\NotesApp\\client\\src\\App.js":"2","E:\\0TUser18\\Downloads\\Projects\\NotesApp\\client\\src\\components\\NoteCreator\\NoteCreatorHub.jsx":"3","E:\\0TUser18\\Downloads\\Projects\\NotesApp\\client\\src\\components\\NoteCreator\\NoteCreatorEditor.jsx":"4","E:\\0TUser18\\Downloads\\Projects\\NotesApp\\client\\src\\components\\NoteCreator\\NoteCreatorSidebar.jsx":"5"},{"size":263,"mtime":1676327953902,"results":"6","hashOfConfig":"7"},{"size":383,"mtime":1676327953896,"results":"8","hashOfConfig":"7"},{"size":2928,"mtime":1676327953899,"results":"9","hashOfConfig":"7"},{"size":4619,"mtime":1676327953898,"results":"10","hashOfConfig":"7"},{"size":3014,"mtime":1676327953899,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7ftos4",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"E:\\0TUser18\\Downloads\\Projects\\NotesApp\\client\\src\\index.js",[],[],"E:\\0TUser18\\Downloads\\Projects\\NotesApp\\client\\src\\App.js",[],[],"E:\\0TUser18\\Downloads\\Projects\\NotesApp\\client\\src\\components\\NoteCreator\\NoteCreatorHub.jsx",[],[],"E:\\0TUser18\\Downloads\\Projects\\NotesApp\\client\\src\\components\\NoteCreator\\NoteCreatorEditor.jsx",["29","30","31","32","33","34","35"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { Editor } from \"ckeditor5-custom-build/build/ckeditor\";\r\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\n\r\n//With props being an object we know props has one key on it therefore we can destructure it through naming the key creating a local variable \r\nconst NoteCreatorEditor = ({prop_GetActiveNote, prop_OnUpdateNote}) => {\r\n\r\n  //Getters and Setters that are a part of the 'preview note' button to see how the note will be viewed\r\n  const [open, setOpen] = useState(false);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const [wordCount, setWordCount] = useState(0); //Getter and setter for the word count\r\n  const noteTopics = [{name: \"Maths\"}, {name: \"Science\"}, {name: \"English\"}, {name: \"CS\"}, {name: \"Business\"}, {name: \"Pharmacy\"}, {name: \"Law\"}, {name: \"Economics\"}, \r\n  {name: \"Accounting\"}, {name: \"Psychology\"}, {name: \"Medicine\"}, {name: \"Politics\"}]\r\n\r\n  const onEditField = (key, value) => {\r\n    prop_OnUpdateNote({\r\n      ...prop_GetActiveNote,\r\n      id: prop_GetActiveNote.noteIDCustom,\r\n      [key]: value,\r\n      lastModified: Date.now(),\r\n    });\r\n  };\r\n\r\n  //If there is no active note selected then this will be used as a placeholder\r\n  if (!prop_GetActiveNote)\r\n  return <div className=\"no-active-note\">No selected note</div>;\r\n\r\n  //Used to set the topic of the note\r\n  const settingTopic = () => {\r\n    var select = document.getElementById(\"topicList\");\r\n    var value = select.options[select.selectedIndex].value;\r\n    onEditField(\"topic\", value);\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"noteCreator-hero-container\">\r\n        <div className=\"noteCreator-main-note-editor-container\">\r\n          <input\r\n            style={{ marginBottom: \"10px\", padding: \"0px 5px\" }}\r\n            id=\"note-title\"\r\n            type=\"text\"\r\n            onChange={(event) => onEditField(\"title\", event.target.value)}\r\n            autoFocus\r\n            value={prop_GetActiveNote.title}\r\n          />\r\n\r\n          <select\r\n            id=\"topicList\"\r\n            onChange={() => settingTopic()}\r\n            style={{ marginBottom: \"10px\", marginRight: \"10px\", }}\r\n          >\r\n            <option value={\"General\"}>General</option>\r\n            {noteTopics.map((topics) => (\r\n              <option value={topics.name} key={topics.name}>\r\n                {topics.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n\r\n          <label\r\n            style={{ marginBottom: \"10px\", marginRight: \"20px\", display: \"inline-block\" }}\r\n            className=\"current-topic\"\r\n          >\r\n            Current Topic: {prop_GetActiveNote.topic}\r\n          </label>\r\n\r\n          <label\r\n            style={{\r\n              marginBottom: \"20px\",\r\n              display: \"inline-block\",\r\n              marginRight: \"10px\",\r\n            }}\r\n          >\r\n            Word Count: {wordCount}{\" \"}\r\n          </label>\r\n\r\n          <CKEditor\r\n            editor={Editor}\r\n            config={{\r\n              toolbar: [\r\n                \"heading\",\r\n                \"|\",\r\n                \"undo\",\r\n                \"redo\",\r\n                \"fontFamily\",\r\n                \"fontSize\",\r\n                \"bold\",\r\n                \"italic\",\r\n                \"link\",\r\n                \"bulletedList\",\r\n                \"numberedList\",\r\n                \"|\",\r\n                \"outdent\",\r\n                \"indent\",\r\n                \"|\",\r\n                \"blockQuote\",\r\n                \"insertTable\",\r\n                \"mediaEmbed\",\r\n                \"underline\",\r\n                \"todoList\",\r\n                \"strikethrough\",\r\n                \"specialCharacters\",\r\n                \"pageBreak\",\r\n                \"highlight\",\r\n                \"horizontalLine\",\r\n                \"fontBackgroundColor\",\r\n                \"fontColor\",\r\n                \"code\",\r\n                \"codeBlock\",\r\n                \"alignment\",\r\n              ],\r\n            }}\r\n            data={prop_GetActiveNote.body}\r\n            id={prop_GetActiveNote.noteIDCustom}\r\n            onChange={(event, editor) => {\r\n              onEditField(\"body\", editor.getData());\r\n              setWordCount(\r\n                editor\r\n                  .getData()\r\n                  .replace(/(<([^>]+)>)/gi, \"\")\r\n                  .trim()\r\n                  .split(/\\s+/).length\r\n              );\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NoteCreatorEditor","E:\\0TUser18\\Downloads\\Projects\\NotesApp\\client\\src\\components\\NoteCreator\\NoteCreatorSidebar.jsx",["36"],[],"import React from 'react'\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n//With props being an object we know props has one key on it therefore we can destructure it through naming the key creating a local variable\r\nconst NoteCreatorSidebar = ({\r\n  prop_Notes,\r\n  prop_OnAddNote,\r\n  prop_OnDeleteNote,\r\n  prop_ActiveNote,\r\n  prop_SetActiveNote,\r\n}) => {\r\n  let navigate = useNavigate();\r\n\r\n  const route = () => {\r\n    navigate(\"/\");\r\n  };\r\n  const sortedNotes = prop_Notes.sort((a, b) => b.changed - a.changed); //An array which will get the Notes prop from the hub and sort it based on last modified\r\n\r\n  //Function to return the pure text for each note which will be used in the sidebar note preview\r\n  function getText(html) {\r\n    var divContainer = document.createElement(\"div\");\r\n    divContainer.innerHTML = html;\r\n    return divContainer.textContent || divContainer.innerText || \"\";\r\n  }\r\n        \r\n\r\n  return (\r\n    <div className=\"noteCreator-sidebar-container\">\r\n\r\n      <div className=\"noteCreator-sidebar-header\">\r\n        <h1 style={{margin: 0}}>Notes</h1>\r\n\r\n        {/*Add Button*/}\r\n        <button \r\n          onClick={prop_OnAddNote} \r\n          style={{marginRight: '7px', border: '2px solid black', backgroundColor: 'white'}}\r\n        >\r\n          <AddIcon/>\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"noteCreator-sidebar-notes\">\r\n        {/*This map function will create a div for each note in the array containing the note's title, preview body, metadata by looping through it*/}\r\n        {sortedNotes.map((note) => (\r\n          <div\r\n            key={note.noteIDCustom}\r\n            className={`noteCreator-sidebar-note ${\r\n              note.noteIDCustom === prop_ActiveNote && \"active\"\r\n            }`}\r\n            onClick={() => prop_SetActiveNote(note.noteIDCustom)}\r\n          >\r\n            <div className=\"noteCreator-sidebar-note-header\">\r\n              {/*Note Title Text*/}\r\n              <strong>{note.title} </strong>\r\n\r\n              {/*Delete Note Button*/}\r\n              <button\r\n                style={{ color: \"red\", marginRight: \"1px\" }}\r\n                onClick={() => prop_OnDeleteNote(note.noteIDCustom)}\r\n              >\r\n                <DeleteIcon/>\r\n              </button>\r\n            </div>\r\n\r\n            {/*Note Body Preview - If there is a note body then do X (&&)*/}\r\n            <p className=\"noteCreator-sidebar-note-preview\">\r\n              {getText(note.body && note.body.substr(0, 100) + \"...\")}\r\n            </p>\r\n\r\n            {/*Note Metadata*/}\r\n            <small className=\"noteCreator-sidebar-note-meta\">\r\n              Last modified:{\" \"}\r\n              {new Date(note.changed).toLocaleDateString(\"en-GB\", {\r\n                hour: \"2-digit\",\r\n                minute: \"2-digit\",\r\n              })}\r\n            </small>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NoteCreatorSidebar",{"ruleId":"37","severity":1,"message":"38","line":1,"column":27,"nodeType":"39","messageId":"40","endLine":1,"endColumn":36},{"ruleId":"37","severity":1,"message":"41","line":4,"column":8,"nodeType":"39","messageId":"40","endLine":4,"endColumn":13},{"ruleId":"37","severity":1,"message":"42","line":5,"column":8,"nodeType":"39","messageId":"40","endLine":5,"endColumn":11},{"ruleId":"37","severity":1,"message":"43","line":6,"column":8,"nodeType":"39","messageId":"40","endLine":6,"endColumn":18},{"ruleId":"37","severity":1,"message":"44","line":13,"column":10,"nodeType":"39","messageId":"40","endLine":13,"endColumn":14},{"ruleId":"37","severity":1,"message":"45","line":14,"column":9,"nodeType":"39","messageId":"40","endLine":14,"endColumn":19},{"ruleId":"37","severity":1,"message":"46","line":15,"column":9,"nodeType":"39","messageId":"40","endLine":15,"endColumn":20},{"ruleId":"37","severity":1,"message":"47","line":16,"column":9,"nodeType":"39","messageId":"40","endLine":16,"endColumn":14},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Modal' is defined but never used.","'Box' is defined but never used.","'Typography' is defined but never used.","'open' is assigned a value but never used.","'handleOpen' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'route' is assigned a value but never used."]